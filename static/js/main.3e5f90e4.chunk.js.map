{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","incrementCount","e","console","log","dbRef","database","ref","target","index","child","update","vote1","state","voteIncrement","setState","questionArray","userNameArray","currentQuestion","on","fbData","val","questionObject","questionContent","Object","values","className","this","map","value","blueOption","option1","redOption","option2","blueVote","redVote","vote2","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVAaCA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,8CACZC,YAAa,qDACbC,UAAW,8BACXC,cAAe,0CACfC,kBAAmB,eACnBC,MAAO,8CAKKR,QAAf,EC+EeS,E,YAvFb,aAAe,IAAD,8BACZ,+CAiBFC,eAAiB,SAACC,GAChBC,QAAQC,IAAI,SACZ,IAAMC,EAAQd,EAASe,WAAWC,MAClCJ,QAAQC,IAAIF,EAAEM,OAAOC,OAKrBN,QAAQC,IAAIC,EAAMK,MAAM,kBAAkBA,MAAM,aAAaC,OAAO,CAACC,MAAO,EAAKC,MAAMC,iBAIvF,EAAKC,SAAS,CACZD,cAAe,EAAKD,MAAMC,cAAgB,KA5B5C,EAAKD,MAAQ,CACXG,cAAe,GACfC,cAAc,GACdH,cAAe,EACfI,gBAAiB,IAPP,E,iFAqCO,IAAD,OAEJ3B,EAASe,WAAWC,MAE5BY,GAAG,SAAS,SAAAC,GAChBjB,QAAQC,IAAIgB,EAAOC,OACnB,IACMC,EADeF,EAAOC,MACQC,eAE9BC,EAAkBC,OAAOC,OAAOH,GAGtC,EAAKP,SAAS,CACZC,cAAeO,S,+BAMZ,IAAD,OACN,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,WACb,mCAIEC,KAAKd,MAAMG,cAAcY,KAAI,SAACC,GAC9B,IAAMC,EAAaD,EAAME,QACnBC,EAAYH,EAAMI,QAClBC,EAAWL,EAAMjB,MACjBuB,EAAUN,EAAMO,MACtB,OAEE,yBAAKV,UAAU,iBACb,4BAAQW,GAAG,gBAAgBX,UAAU,yBAAyBG,MAAM,QAAQS,QAAS,EAAKrC,gBACvF6B,EADH,IACe,2BAAII,IAEnB,4BAAQG,GAAG,iBAAiBX,UAAU,wBAAwBG,MAAM,QAAOS,QAAS,EAAKrC,gBACtF+B,EADH,IACc,2BAAIG,c,GA7EhBI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3e5f90e4.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n const firebaseConfig = {\n   apiKey: \"AIzaSyAw2AFRCleo_E54vnkvFJXJx7ZO89kV2Cg\",\n   authDomain: \"pierce-morales-project-five.firebaseapp.com\",\n   databaseURL: \"https://pierce-morales-project-five.firebaseio.com\",\n   projectId: \"pierce-morales-project-five\",\n   storageBucket: \"pierce-morales-project-five.appspot.com\",\n   messagingSenderId: \"897691297756\",\n   appId: \"1:897691297756:web:cfe6a7c6dce33c699e1119\"\n };\n // Initialize Firebase\n firebase.initializeApp(firebaseConfig);\n \nexport default firebase;\n","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questionArray: [],\n      userNameArray:[],\n      voteIncrement: 0,\n      currentQuestion: [],\n    }\n    \n  }\n\n\n  //current question that goes through the firebase database and grab the value of vote for the question and increment using event.target.value\n\n\n\n  //increment button counter function\n  incrementCount = (e) => {\n    console.log('click');\n    const dbRef = firebase.database().ref();\n    console.log(e.target.index);\n    // dbRef.on(\"value\", voteData => {\n    //   // console.log(voteData.child('questionObject').Object();\n    // })\n    // dbRef.on('')\n    console.log(dbRef.child('questionObject').child('question1').update({vote1: this.state.voteIncrement}));\n    // questionObject/question1/vote1\n\n    \n    this.setState({\n      voteIncrement: this.state.voteIncrement + 1\n    })\n  }\n\n\n\n  componentDidMount() {\n    //connecting app to firebase\n    const dbRef = firebase.database().ref();\n    //storing firebase into variable for use\n    dbRef.on(\"value\", fbData => {\n      console.log(fbData.val())\n      const firebaseInfo = fbData.val() \n      const questionObject = firebaseInfo.questionObject\n      //grabbing original question object from firebase and storing into a variable \n      const questionContent = Object.values(questionObject)\n      \n      //converting the object into an array and storing into state\n      this.setState({\n        questionArray: questionContent,\n      });\n    });\n    \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <h1>wyr</h1>\n          \n          {\n            //mapping through the array to get required values\n            this.state.questionArray.map((value) => {\n            const blueOption = value.option1;\n            const redOption = value.option2;\n            const blueVote = value.vote1;\n            const redVote = value.vote2;\n            return (\n              // topic vote buttons\n              <div className=\"buttonContent\">\n                <button id=\"questionIndex\" className=\"blueButton topicButton\" value=\"vote1\" onClick={this.incrementCount}>\n                  {blueOption} <p>{blueVote}</p>\n                </button>\n                <button id=\"questionIndex2\" className=\"redButton topicButton\" value=\"vote2\"onClick={this.incrementCount}>\n                  {redOption} <p>{redVote}</p>\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}