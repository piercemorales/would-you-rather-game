{"version":3,"sources":["firebase.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","href","Component","App","incrementCountBlue","e","preventDefault","vote","state","currentQuestion","currentTarget","id","qName","vote1","database","ref","child","qNumber","update","setState","blueVoteIncrement","incrementCountRed","vote2","redVoteIncrement","questionArray","userNameArray","on","fbData","questionObject","val","questionContent","Object","values","questionNumber","key","questionNumbers","voted","push","this","map","value","index","blueOption","option1","redOption","option2","blueVote","redVote","currentQ","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAYAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECKeS,E,iLAfP,OACE,yBAAKC,UAAU,iBACb,sCAEA,sHAIA,uBAAGC,KAAK,mBAAmBD,UAAU,WAArC,a,GAVSE,aCoHNC,E,YA9Gb,aAAe,IAAD,8BACZ,+CAcFC,mBAAqB,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAO,EAAKC,MAAMC,gBAAgBJ,EAAEK,cAAcC,IAAIC,MAAMC,MAAQ,EAC5DvB,EAASwB,WAAWC,IAAI,kBAChCC,MAAN,UAAe,EAAKR,MAAMC,gBAAgBJ,EAAEK,cAAcC,IAAIM,UAAWC,OAAO,CAAEL,MAAON,IAEzF,EAAKY,SAAS,CACZC,kBAAmBb,KAtBT,EA8Bdc,kBAAoB,SAAChB,GACnBA,EAAEC,iBACF,IAAMC,EAAO,EAAKC,MAAMC,gBAAgBJ,EAAEK,cAAcC,IAAIC,MAAMU,MAAQ,EAC5DhC,EAASwB,WAAWC,IAAI,kBAEhCC,MAAN,UAAe,EAAKR,MAAMC,gBAAgBJ,EAAEK,cAAcC,IAAIM,UAAWC,OAAO,CAAEI,MAAOf,IAEzF,EAAKY,SAAS,CACZI,iBAAkBhB,KAnCpB,EAAKC,MAAQ,CACXgB,cAAe,GACfC,cAAc,GACdF,iBAAkB,EAClBH,kBAAmB,EACnBX,gBAAiB,IARP,E,iFA4CO,IAAD,OAEJnB,EAASwB,WAAWC,MAE5BW,GAAG,SAAS,SAAAC,GAChB,IACMC,EADeD,EAAOE,MACQD,eAE9BE,EAAkBC,OAAOC,OAAOJ,GAGhCK,EAAiB,GACvB,IAAI,IAAIC,KAAON,EAAe,CAC5B,IAAMO,EAAkB,CACtBlB,QAASiB,EACTtB,MAAOgB,EAAeM,GACtBE,OAAO,GAETH,EAAeI,KAAKF,GAGtB,EAAKhB,SAAS,CACZK,cAAeM,EACfrB,gBAAiBwB,S,+BAQd,IAAD,OACN,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,6BAASW,GAAG,kBAAkBX,UAAU,YAGpCsC,KAAK9B,MAAMgB,cAAce,KAAI,SAACC,EAAOC,GACrC,IAAMC,EAAaF,EAAMG,QACnBC,EAAYJ,EAAMK,QAClBC,EAAWN,EAAM3B,MACjBkC,EAAUP,EAAMlB,MAChB0B,EAAWP,EAEjB,OAEE,8BACE,4BAAQ9B,GAAIqC,EAAUhD,UAAU,yBAAyBwC,MAAM,QAAQS,QAAS,EAAK7C,oBAClFsC,EADH,IACe,uBAAG1C,UAAU,eAAe8C,IAE3C,4BAAQnC,GAAIqC,EAAUhD,UAAU,wBAAwBwC,MAAM,QAAOS,QAAS,EAAK5B,mBAChFuB,EADH,IACc,uBAAG5C,UAAU,eAAe+C,e,GAlG1C7C,aCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.da31b947.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBaMF3Ot_IKB9ScxPgGi4fJ5PVPP8i0bPY\",\n  authDomain: \"pierce-morales-project-f-ef1c3.firebaseapp.com\",\n  databaseURL: \"https://pierce-morales-project-f-ef1c3.firebaseio.com\",\n  projectId: \"pierce-morales-project-f-ef1c3\",\n  storageBucket: \"pierce-morales-project-f-ef1c3.appspot.com\",\n  messagingSenderId: \"527917855228\",\n  appId: \"1:527917855228:web:005ef6b7b58b07896d0279\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n          <div className=\"headerContent\">\n            <h1>Choice</h1>\n\n            <p>\n              Choose one of two options you prefer and see how many others voted\n              with or against you!\n            </p>\n            <a href=\"#questionSection\" className=\"playBtn\">\n              play\n            </a>\n          </div>\n        );\n    }\n}\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport Header from './Header'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questionArray: [],\n      userNameArray:[],\n      redVoteIncrement: 0,\n      blueVoteIncrement: 0,\n      currentQuestion: [],\n    }\n  }\n\n\n\n  //increment button counter function\n  incrementCountBlue = (e) => {\n    e.preventDefault()\n    const vote = this.state.currentQuestion[e.currentTarget.id].qName.vote1 + 1;\n    const dbRef = firebase.database().ref(\"questionObject\");\n    dbRef.child(`${this.state.currentQuestion[e.currentTarget.id].qNumber}`).update({ vote1: vote });\n\n    this.setState({\n      blueVoteIncrement: vote\n    })\n  }\n\n// blue ends here\n// red starts here\n\n\n  incrementCountRed = (e) => {\n    e.preventDefault()\n    const vote = this.state.currentQuestion[e.currentTarget.id].qName.vote2 + 1;\n    const dbRef = firebase.database().ref('questionObject');\n    \n    dbRef.child(`${this.state.currentQuestion[e.currentTarget.id].qNumber}`).update({ vote2: vote});\n\n    this.setState({\n      redVoteIncrement: vote\n    })\n  }\n\n\n\n  componentDidMount() {\n    //connecting app to firebase\n    const dbRef = firebase.database().ref();\n    //storing firebase into variable for use\n    dbRef.on(\"value\", fbData => {\n      const firebaseInfo = fbData.val() \n      const questionObject = firebaseInfo.questionObject\n      //grabbing original question object from firebase and storing into a variable \n      const questionContent = Object.values(questionObject)\n\n\n      const questionNumber = []\n      for(let key in questionObject){\n        const questionNumbers = {\n          qNumber: key,\n          qName: questionObject[key],\n          voted: false\n        }\n        questionNumber.push(questionNumbers)\n      }\n      //converting the object into an array and storing into state\n      this.setState({\n        questionArray: questionContent,\n        currentQuestion: questionNumber\n        \n      });\n      // console.log(this.state.currentQuestion);\n    });\n    \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <Header />\n          <section id=\"questionSection\" className=\"question\">\n            {\n            //mapping through the array to get required values\n              this.state.questionArray.map((value, index) => {\n              const blueOption = value.option1;\n              const redOption = value.option2;\n              const blueVote = value.vote1;\n              const redVote = value.vote2;\n              const currentQ = index\n              \n              return (\n                // topic vote buttons\n                <form>\n                  <button id={currentQ} className=\"blueButton topicButton\" value=\"vote1\" onClick={this.incrementCountBlue}>\n                    {blueOption} <p className=\"voteDisplay\">{blueVote}</p>\n                  </button>\n                  <button id={currentQ} className=\"redButton topicButton\" value=\"vote2\"onClick={this.incrementCountRed}>\n                    {redOption} <p className=\"voteDisplay\">{redVote}</p>\n                  </button>\n                </form>\n                // have another option voted: false direct the onClick to update voted: true \n              );\n            })}\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}